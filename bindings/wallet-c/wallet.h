/**
 * Wallet for JÃ¶rmungandr blockchain
 *
 * Provide support for recovering funds from both Yoroi and Daedalus wallets.
 *
 * Copyright 2020, Input Output HK Ltd
 * Licensed with: MIT OR Apache-2.0
 */

#ifndef IOHK_CHAIN_WALLET_LIBC_
#define IOHK_CHAIN_WALLET_LIBC_

/* Generated with cbindgen:0.14.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * result error code
 */
enum RecoveringResult
{
  /**
   * returned if the function succeed
   */
  RecoveringResult_Success = 0,
  /**
   * this error is returned if the users mnemonics are invalid
   */
  RecoveringResult_InvalidMnemonics,
  /**
   * happens if the block is not valid
   */
  RecoveringResult_InvalidBlockFormat,
  /**
   * index is out of bound
   */
  RecoveringResult_IndexOutOfBound,
  /**
   * a pointer was null where it was expected it to be non null
   */
  RecoveringResult_PtrIsNull,
};
typedef uint8_t RecoveringResult;

typedef struct Conversion Conversion;

/**
 * the blockchain settings
 *
 * this can be retrieved when parsing the block0
 *
 * It contains all the necessary information to make valid transactions
 * (including transferring legacy wallets into a new secure wallet).
 */
typedef struct Settings Settings;

/**
 * the wallet
 *
 * * use the `recover` function to recover the wallet from the mnemonics/password;
 * * use the `retrieve_funds` to retrieve initial funds (if necessary) from the block0;
 *   then you can use `total_value` to see how much was recovered from the initial block0;
 *
 * DO NOT FORGET:
 *
 * to delete with `delete_wallet` once you do not need the wallet as there are
 * cryptographic material and forgetting to delete it properly will result
 * in risking leaking your wallet private keys
 *
 */
typedef struct Wallet Wallet;

typedef Wallet *WalletPtr;

typedef Settings *SettingsPtr;

typedef Conversion *ConversionPtr;

/**
 * once funds have been retrieved with `iohk_jormungandr_wallet_retrieve_funds`
 * it is possible to convert all existing funds to the new wallet.
 *
 * The returned arrays are transactions to send to the network in order to do the
 * funds conversion.
 *
 * Don't forget to call `iohk_jormungandr_wallet_delete_conversion` to
 * properly free the memory
 *
 */
RecoveringResult iohk_jormungandr_wallet_convert(WalletPtr wallet,
                                                 SettingsPtr settings,
                                                 ConversionPtr *conversion_out);

/**
 * get the total value ignored in the conversion
 *
 * value_out: will returns the total value lost into dust inputs
 * ignored_out: will returns the number of dust utxos
 *
 * these returned values are informational only and this show that
 * there are UTxOs entries that are unusable because of the way they
 * are populated with dusts.
 */
RecoveringResult iohk_jormungandr_wallet_convert_ignored(ConversionPtr conversion,
                                                         uint64_t *value_out,
                                                         uintptr_t *ignored_out);

/**
 * retrieve the index-nth transactions in the conversions starting from 0
 * and finishing at `size-1` where size is retrieved from
 * `iohk_jormungandr_wallet_convert_transactions_size`.
 *
 * the memory allocated returned is not owned and should not be kept
 * for longer than potential call to `iohk_jormungandr_wallet_delete_conversion`
 */
RecoveringResult iohk_jormungandr_wallet_convert_transactions_get(ConversionPtr conversion,
                                                                  uintptr_t index,
                                                                  const uint8_t **transaction_out,
                                                                  uintptr_t *transaction_size);

/**
 * get the number of transactions built to convert the retrieved wallet
 */
uintptr_t iohk_jormungandr_wallet_convert_transactions_size(ConversionPtr conversion);

/**
 * delete the pointer
 */
void iohk_jormungandr_wallet_delete_conversion(ConversionPtr conversion);

/**
 * delete the pointer and free the allocated memory
 */
void iohk_jormungandr_wallet_delete_settings(SettingsPtr settings);

/**
 * delete the pointer, zero all the keys and free the allocated memory
 */
void iohk_jormungandr_wallet_delete_wallet(WalletPtr wallet);

/**
 * retrieve a wallet from the given mnemonics, password and protocol magic
 *
 * this function will work for all yoroi, daedalus and other wallets
 * as it will try every kind of wallet anyway
 *
 * You can also use this function to recover a wallet even after you have
 * transferred all the funds to the new format (see the _convert_ function)
 *
 * The recovered wallet will be returned in `wallet_out`.
 *
 * # parameters
 *
 * * mnemonics: a null terminated utf8 string (already normalized NFKD) in english;
 * * password: pointer to the password (in bytes, can be UTF8 string or a bytes of anything);
 *   this value is optional and passing a null pointer will result in no password;
 * * password_length: the length of the password;
 * * wallet_out: a pointer to a pointer. The recovered wallet will be allocated on this pointer;
 *
 * # errors
 *
 * The function may fail if:
 *
 * * the mnemonics are not valid (invalid length or checksum);
 * * the `wallet_out` is null pointer
 *
 */
RecoveringResult iohk_jormungandr_wallet_recover(const char *mnemonics,
                                                 const uint8_t *password,
                                                 uintptr_t password_length,
                                                 WalletPtr *wallet_out);

/**
 * retrieve funds from daedalus or yoroi wallet in the given block0 (or
 * any other blocks).
 *
 * Execute this function then you can check who much funds you have
 * retrieved from the given block.
 *
 * this function may take sometimes so it is better to only call this
 * function if needed.
 *
 * # Parameters
 *
 * * wallet: the recovered wallet (see recover function);
 * * block0: the pointer to the bytes of the block0;
 * * block0_length: the length of the block0 byte string;
 * * settings_out: the settings that will be parsed from the given
 *   block0;
 *
 * # Errors
 *
 * * this function may fail if the wallet pointer is null;
 * * the block is not valid (cannot be decoded)
 *
 */
RecoveringResult iohk_jormungandr_wallet_retrieve_funds(WalletPtr wallet,
                                                        const uint8_t *block0,
                                                        uintptr_t block0_length,
                                                        SettingsPtr *settings_out);

/**
 * get the total value in the wallet
 *
 * make sure to call `retrieve_funds` prior to calling this function
 * otherwise you will always have `0`
 *
 * After calling this function the results is returned in the `total_out`.
 *
 * # Errors
 *
 * * this function may fail if the wallet pointer is null;
 *
 * If the `total_out` pointer is null, this function does nothing
 */
RecoveringResult iohk_jormungandr_wallet_total_value(WalletPtr wallet,
                                                     uint64_t *total_out);

#endif /* IOHK_CHAIN_WALLET_LIBC_ */
